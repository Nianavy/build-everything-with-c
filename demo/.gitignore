# .gitignore
#
# -------------------------------------------------------------
# 编译生成的文件 (Build Artifacts)
# -------------------------------------------------------------

# 忽略所有目标文件 (object files)
# obj/ 会忽略 obj 目录下的所有内容，这通常是足够的
obj/
# 如果目标文件可能散落在其他目录，可以使用 *.o
# *.o

# 忽略所有可执行文件 (executables)
# bin/ 会忽略 bin 目录下的所有内容，这通常是足够的
bin/
# 如果可执行文件可能散落在其他目录，可以使用匹配符
*.exe          # Windows 可执行文件
*.out          # 默认输出文件
a.out          # Unix/Linux 默认输出文件
test
gmon.out

# 忽略库文件
*.lib
*.dll
*.so
*.dylib

# 忽略调试符号文件
*.dSYM/
*.pdb

# -------------------------------------------------------------
# 运行时生成的文件 (Runtime Generated Files)
# -------------------------------------------------------------

# 数据库文件
*.db
# 如果有其他特定的数据库文件，可以明确列出
test.db
*.txt

# 日志文件
*.log

# 临时文件
*.tmp
temp/
#*#              # Emacs 备份文件
*~               # Vim 备份文件

# -------------------------------------------------------------
# IDE 和编辑器相关文件 (IDE and Editor Files)
# -------------------------------------------------------------

# Visual Studio Code
.vscode/

# IntelliJ IDEA / CLion
.idea/
*.iml

# Vim swap files
*.swp
*.swo

# Emacs backup files
#*#
.#*

# Eclipse
.project
.classpath
.settings/

# NetBeans
nbproject/
*.form
*.ser

# -------------------------------------------------------------
# 操作系统相关文件 (OS-specific Files)
# -------------------------------------------------------------

# macOS
.DS_Store
.Trashes
ehthumbs.db

# Windows
Thumbs.db
Desktop.ini

# -------------------------------------------------------------
# Git 特定文件 (Git Specific Files)
# -------------------------------------------------------------

# Git 工作目录外的其他 git 仓库，例如子模块中的 .git 文件夹
# 如果有子模块，可能需要调整 .gitmodules
# 但通常 .git 文件夹本身是 Git 管理的，不需要在这里列出
# 如果你不小心添加了 .git 文件夹，需要 git rm --cached .git

# GDB 历史文件
.gdb_history